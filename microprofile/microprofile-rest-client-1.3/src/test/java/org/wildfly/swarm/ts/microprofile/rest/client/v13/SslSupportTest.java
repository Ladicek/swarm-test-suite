package org.wildfly.swarm.ts.microprofile.rest.client.v13;

import org.apache.http.client.fluent.Request;
import org.apache.http.conn.ssl.DefaultHostnameVerifier;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.container.test.api.RunAsClient;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.Archive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.ClassLoaderAsset;
import org.jboss.shrinkwrap.api.asset.EmptyAsset;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(Arquillian.class)
public class SslSupportTest {
    @Deployment
    public static Archive<?> deployment() {
        return ShrinkWrap.create(WebArchive.class)
                .addPackage(SslClient.class.getPackage())
                .addClass(DefaultHostnameVerifier.class)
                .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
                // generated by the Keytool Maven plugin
                .addAsManifestResource("client-cert.cer")
                .addAsManifestResource("client-keystore.jks")
                .addAsManifestResource("client-truststore.jks")
                .addAsManifestResource("server-cert.cer")
                .addAsManifestResource("server-keystore.jks")
                .addAsManifestResource("server-truststore.jks")
                // defines SSL configuration for the CDI-created client
                .addAsManifestResource("META-INF/microprofile-config.properties", "microprofile-config.properties")
                .addAsResource(new ClassLoaderAsset("project-defaults.yml"), "project-defaults.yml");
    }

    @Test
    @RunAsClient
    public void sslClient() throws IOException {
        String response = Request.Get("http://localhost:8080/rest/client/ssl-client").execute().returnContent().asString();
        assertThat(response).isEqualTo("SSL client got: Hello from endpoint");
    }

    @Test
    @RunAsClient
    public void sslClientCdi() throws IOException {
        String response = Request.Get("http://localhost:8080/rest/client/ssl-client-cdi").execute().returnContent().asString();
        assertThat(response).isEqualTo("SSL client got: Hello from endpoint");
    }
}
